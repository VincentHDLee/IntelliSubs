# ASS (Advanced SubStation Alpha) Subtitle Formatter
from .base_formatter import BaseSubtitleFormatter
import math
import pysrt

def format_time_ass(seconds: float) -> str:
    """Converts seconds to ASS time format H:MM:SS.xx (centiseconds)"""
    if seconds < 0: seconds = 0.0 # Guard
    hours = math.floor(seconds / 3600)
    remaining_seconds = seconds % 3600
    minutes = math.floor(remaining_seconds / 60)
    remaining_seconds %= 60
    centiseconds = math.floor((remaining_seconds - math.floor(remaining_seconds)) * 100)
    return f"{int(hours)}:{int(minutes):02d}:{math.floor(remaining_seconds):02d}.{int(centiseconds):02d}"

class ASSFormatter(BaseSubtitleFormatter):
    def __init__(self, logger=None):
        super().__init__(logger)
        self.logger.info("ASSFormatter initialized.")

    def format_subtitles(self, subtitle_entries: list) -> str:
        """
        Formats subtitle entries into a basic ASS format.
        Does not include complex styling, just basic dialogue.

        Args:
            subtitle_entries (list): List of pysrt.SubRipItem objects.

        Returns:
            str: ASS formatted string.
        """
        ass_content = []

        # Script Info Section (Basic)
        ass_content.append("[Script Info]")
        ass_content.append("; Script generated by IntelliSubs")
        ass_content.append("Title: Default IntelliSubs Title") # Placeholder
        ass_content.append("ScriptType: v4.00+") # Standard for ASS
        ass_content.append("PlayResX: 1280") # Common playback resolution X
        ass_content.append("PlayResY: 720")  # Common playback resolution Y
        ass_content.append("WrapStyle: 0") # 0: Smart wrapping, with \N for newlines
        ass_content.append("")

        # V4+ Styles Section (Basic Default Style)
        ass_content.append("[V4+ Styles]")
        ass_content.append("Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding")
        # Example Default Style (can be customized)
        ass_content.append("Style: Default,Arial,28,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,1,2,10,10,10,1") # Encoding 1 for UTF-8 usually
        ass_content.append("")

        # Events Section (Dialogue)
        ass_content.append("[Events]")
        ass_content.append("Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text")

        for entry in subtitle_entries:
            if not isinstance(entry, pysrt.SubRipItem):
                self.logger.warning(f"ASSFormatter: Entry is not a SubRipItem: {type(entry)}. Skipping.")
                continue

            # Convert SubRipTime to float seconds for the existing format_time_ass helper
            start_seconds = entry.start.ordinal / 1000.0 if entry.start else 0.0
            end_seconds = entry.end.ordinal / 1000.0 if entry.end else 0.0
            
            # Ensure start_seconds is not greater than end_seconds
            if start_seconds > end_seconds:
                self.logger.warning(f"ASSFormatter: Start time ({start_seconds}s) is after end time ({end_seconds}s) for entry text: '{entry.text[:30]}...'. Adjusting end time to start time.")
                end_seconds = start_seconds

            start_time_str = format_time_ass(start_seconds) # Uses module-level helper
            end_time_str = format_time_ass(end_seconds)     # Uses module-level helper
            
            text = entry.text.replace('\n', '\\N') # ASS uses \N for newlines

            # Basic dialogue line: Layer 0, Default style, no actor name, default margins, no effect
            dialogue_line = f"Dialogue: 0,{start_time_str},{end_time_str},Default,,0,0,0,,{text}"
            ass_content.append(dialogue_line)

        return "\n".join(ass_content)